<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>根节点</title>
  
  
  <link href="https://huangpiao.tech/atom.xml" rel="self"/>
  
  <link href="https://huangpiao.tech/"/>
  <updated>2021-07-14T13:03:46.926Z</updated>
  <id>https://huangpiao.tech/</id>
  
  <author>
    <name>小公牛</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Win10下使用WSL2搭建K8s集群</title>
    <link href="https://huangpiao.tech/2021/07/14/Win10%E4%B8%8B%E4%BD%BF%E7%94%A8WSL2%E6%90%AD%E5%BB%BAK8s%E9%9B%86%E7%BE%A4/"/>
    <id>https://huangpiao.tech/2021/07/14/Win10%E4%B8%8B%E4%BD%BF%E7%94%A8WSL2%E6%90%AD%E5%BB%BAK8s%E9%9B%86%E7%BE%A4/</id>
    <published>2021-07-14T08:23:02.000Z</published>
    <updated>2021-07-14T13:03:46.926Z</updated>
    
    <content type="html"><![CDATA[<h3 id="名词解释"><a class="markdownIt-Anchor" href="#名词解释"></a> 名词解释</h3><h4 id="wslwindows-subsystem-for-linux"><a class="markdownIt-Anchor" href="#wslwindows-subsystem-for-linux"></a> WSL（Windows Subsystem for Linux）</h4><p>主要是为了在Windows 10上原生运行Linux二进制可执行文件（ELF格式），而提供的兼容层。 通俗来讲是在Windows10 嵌入了个Linux子系统（默认是ubuntu），方便运行大部分 Linux 命令及软件，比如grep MySQL Apache。这很大方便了使用Windows做开发的同学，不需要双系统或虚拟机了。</p> <span id="more"></span><h4 id="wsl-2"><a class="markdownIt-Anchor" href="#wsl-2"></a> WSL 2</h4><p>SL2是适用于 Linux 的 Windows 子系统体系结构的一个新版本，它支持适用于 Linux 的 Windows 子系统在 Windows 上运行 ELF64 Linux 二进制文件。 它的主要目标是提高文件系统性能，以及添加完全的系统调用兼容性。</p><p><strong>那么WSL2究竟相较于WSL1那些改变呢</strong></p><p>1.其实现方式与WSL1不同，WSL 2拥有完整的Linux内核、更贴近真实Linux的使用场景。并且你可以并行运行 WSL 1 和 WSL 2 分发版。<br />2.可以直接使用WSL进入linux终端<br /><a href="https://docs.microsoft.com/zh-cn/windows/wsl/compare-versions">更多变化</a><br /><img data-src="/images/20210714/20210714175055621_12557.png" alt="快捷进入linux终端" /></p><h4 id="k8s"><a class="markdownIt-Anchor" href="#k8s"></a> k8s</h4><p>Kubernetes是一个开源的，用于管理云平台中多个主机上的容器化的应用，Kubernetes的目标是让部署容器化的应用简单并且高效（powerful）,WKubernetes提供了应用部署，规划，更新，维护的一种机制。</p><h3 id="环境准备"><a class="markdownIt-Anchor" href="#环境准备"></a> 环境准备</h3><h4 id="开启开发者模式"><a class="markdownIt-Anchor" href="#开启开发者模式"></a> 开启开发者模式</h4><p><img data-src="/images/20210714/20210714181737601_12641.png" alt="开启开发者模式" /></p><h4 id="开启虚拟机"><a class="markdownIt-Anchor" href="#开启虚拟机"></a> 开启虚拟机</h4><p><img data-src="/images/20210714/20210714181927730_12396.png" alt="开启虚拟机" /></p><pre><code>或者运行命令dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart</code></pre><h4 id="开启适用于window的linux子系统"><a class="markdownIt-Anchor" href="#开启适用于window的linux子系统"></a> 开启适用于window的linux子系统</h4><p><img data-src="/images/20210714/20210714182013065_15652.png" alt="开启适用于window的linux子系统" /></p><pre><code>或者运行命令dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart重新启动计算机，以完成 WSL 安装并更新到 WSL2。还有一个前提条件是需要开启硬件层面的虚拟化，可以通过 BIOS 进入开启。</code></pre><p>** 重启后请检查以上功能是否开启**</p><h4 id="安装ubuntu"><a class="markdownIt-Anchor" href="#安装ubuntu"></a> 安装Ubuntu</h4><p>要在 Windows 10 上安装 Ubuntu，请打开 Microsoft Store 应用，搜索 “Ubuntu 20.04”，然后单击“获取”按钮 <a href="https://www.microsoft.com/zh-cn/p/ubuntu-2004-lts/9n6svws3rx71">详情参考</a><br /><img data-src="/images/20210714/20210714182716766_4234.png" alt="安装ubuntu" /></p><h4 id="设置-wsl2"><a class="markdownIt-Anchor" href="#设置-wsl2"></a> 设置 WSL2</h4><pre><code>查看当前wsl版本wsl -l -v</code></pre><p><a href="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi">如需要升级请下载更新包</a></p><pre><code>设置WSL2默认版本wsl --set-default-version 2设置对应系统wsl版本wsl --set-version 分发版名称 版本号例如，将Ubuntu18.04 设置为WSL2的命令为 wsl --set-version Ubuntu-18.04 2</code></pre><h4 id="配置ubuntu"><a class="markdownIt-Anchor" href="#配置ubuntu"></a> 配置ubuntu</h4><h5 id="更新源"><a class="markdownIt-Anchor" href="#更新源"></a> 更新源</h5><pre><code>1.可以将 Ubuntu 的软件源更换成阿里云的源root@k8s:~# cp /etc/apt/sources.list /etc/apt/sources.list.bakroot@k8s:~# echo &quot;deb http://mirrors.aliyun.com/ubuntu/ focal main restricteddeb http://mirrors.aliyun.com/ubuntu/ focal-updates main restricteddeb http://mirrors.aliyun.com/ubuntu/ focal universedeb http://mirrors.aliyun.com/ubuntu/ focal-updates universedeb http://mirrors.aliyun.com/ubuntu/ focal multiversedeb http://mirrors.aliyun.com/ubuntu/ focal-updates multiversedeb http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ focal-security main restricteddeb http://mirrors.aliyun.com/ubuntu/ focal-security universedeb http://mirrors.aliyun.com/ubuntu/ focal-security multiverse&quot; &gt; /etc/apt/sources.list2.生效配置并更新apt update &amp;&amp; apt upgrade -y</code></pre><h5 id="配置-systemd"><a class="markdownIt-Anchor" href="#配置-systemd"></a> 配置 Systemd</h5><p>由于默认情况下 WSL 中不能使用 systemd，所以很多应用程序没办法启动，不过还是有一些大神解决了这个问题，我们可以在<a href="https://forum.snapcraft.io/t/running-snaps-on-wsl2-insiders-only-for-now/13033">链接下面</a>找到启动 SystemD 的方法。</p><pre><code>1.首先安装 Systemd 相关的依赖：apt install -yqq fontconfig daemonize2.然后创建一个如下所示的脚本文件：# Create the starting script for SystemDvi /etc/profile.d/00-wsl2-systemd.shSYSTEMD_PID=$(ps -ef | grep '/lib/systemd/systemd --system-unit=basic.target$' | grep -v unshare | awk '&#123;print $2&#125;')if [ -z &quot;$SYSTEMD_PID&quot; ]; then   sudo /usr/bin/daemonize /usr/bin/unshare --fork --pid --mount-proc /lib/systemd/systemd --system-unit=basic.target   SYSTEMD_PID=$(ps -ef | grep '/lib/systemd/systemd --system-unit=basic.target$' | grep -v unshare | awk '&#123;print $2&#125;')fiif [ -n &quot;$SYSTEMD_PID&quot; ] &amp;&amp; [ &quot;$SYSTEMD_PID&quot; != &quot;1&quot; ]; then    exec sudo /usr/bin/nsenter -t $SYSTEMD_PID -a su - $LOGNAMEfi</code></pre><p>至此我们已经完成基本环境搭建<br />上面的脚本放置在 /etc/profile.d 目录下面，所以要让脚本生效，我们需要退出当前 session，重新进入即可。</p><h3 id="安装docker"><a class="markdownIt-Anchor" href="#安装docker"></a> 安装docker</h3><h4 id="配置源用于后续使用docker拉取其他镜像"><a class="markdownIt-Anchor" href="#配置源用于后续使用docker拉取其他镜像"></a> 配置源（用于后续使用docker拉取其他镜像）</h4><p><img data-src="/images/20210714/20210714184757329_26465.png" alt="配置源" /></p><h4 id="启用wsl2"><a class="markdownIt-Anchor" href="#启用wsl2"></a> 启用wsl2</h4><p>其实现在我们已经可以直接在 WSL 中去安装 Docker 了，和平时在 Linux 下面操作方式是一样的。但实际上 Docker 也专门开发了可以使用 WSL2 中的 Docker 守护进程的桌面管理程序, 打开 Docker Desktop WSL2 backend 页面，下载最新的 Docker Desktop for Windows 程序 ，安装之后，打开程序做如下设置<br />启用基于WSL2的引擎复选框（Use the WSL 2 based engine）<br /><img data-src="/images/20210714/20210714184949607_19541.png" alt="启用WSL2" /></p><h4 id="设置可访问的子系统"><a class="markdownIt-Anchor" href="#设置可访问的子系统"></a> 设置可访问的子系统</h4><p><img data-src="/images/20210714/20210714185008123_4451.png" alt="关联子系统" /><br />在控制台内输入docker version<br /><img data-src="/images/20210714/20210714185520611_4013.png" alt="查看docker版本信息" /><br />到这里 Docker 和 WSL2 的基本配置就完成了。<br /><a href="https://blog.csdn.net/qq_39611230/article/details/108641842">详细docker相关安装及基本使用可参考</a></p><h3 id="安装k8s单节点集群"><a class="markdownIt-Anchor" href="#安装k8s单节点集群"></a> 安装k8s单节点集群</h3><p>安装 Kubernetes 集群有很多成熟的方案，在本地搭建也有 minikube、microk8s 等等，我们这里选择使用 KinD：在容器中来运行 Kubernetes 的一种简单方式。这里我们将安装 KinD 官方网站的说明（<a href="https://kind.sigs.k8s.io/docs/user/quick-start/%EF%BC%89%E6%9D%A5%E8%BF%9B%E8%A1%8C%E6%93%8D%E4%BD%9C%E3%80%82">https://kind.sigs.k8s.io/docs/user/quick-start/）来进行操作。</a></p><pre><code># 下载 KinD 二进制文件curl -Lo ./kind https://github.com/kubernetes-sigs/kind/releases/download/v0.8.1/kind-$(uname)-amd64# 标记为可执行文件chmod +x ./kind# 移动到 PATH 目录下去mv ./kind /usr/local/bin/# TODO，记得提前下载安装 kubectl 二进制文件</code></pre><p>KinD 获取后，就可以来创建 Kubernetes 集群了</p><pre><code># 检查是否设置了 KUBECONFIG 环境变量echo $KUBECONFIG# 检查是否存在 .kube 目录，不需要手动创建ls $HOME/.kube# 使用 kind 命令创建一个名为 wslk8s 的集群kind create cluster --name wslk8s# 创建后检查 .kube 目录ls $HOME/.kube</code></pre><p><img data-src="/images/20210714/20210714190618338_20043.png" alt="终端" /><br />到这里就成功创建了一个单节点的 Kubernetes 集群，我们也可以在 Windows 的浏览器中打开上面的 Kubernetes master 地址：<br /><img data-src="/images/20210714/20210714190811759_30973.png" alt="单节点master地址" /><br />这就是 Docker Desktop for Windows 与 WSL2 后台结合的真正优势，比之前 Docker 默认的方式性能要好很多。</p><h3 id="安装多节点集群"><a class="markdownIt-Anchor" href="#安装多节点集群"></a> 安装多节点集群</h3><pre><code># 删除现在的集群kind delete cluster --name wslk8s# 创建一个3节点集群的配置文件cat &lt;&lt; EOF &gt; kind-3nodes.yamlkind: ClusterapiVersion: kind.x-k8s.io/v1alpha4nodes:  - role: control-plane  - role: worker  - role: workerEOF# 使用配置文件创建新的集群kind create cluster --name wslkindmultinodes --config ./kind-3nodes.yaml# 获取集群节点kubectl get nodes</code></pre><p><img data-src="/images/20210714/20210714191705884_19404.png" alt="结果" /></p><h4 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h4><p>同样我们也可以在集群中部署应用，比如安装一个 Kubernetes Dashboard</p><pre><code># 1.在集群中安装 Dashboardkubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.1/aio/deploy/recommended.yaml# 2.获取 dashboard 的资源对象kubectl get all -n kubernetes-dashboard3.安装成功后，我们可以使用如下命令创建一个临时的代理：kubectl proxy4.然后在 Windows 浏览器中我们可以通过如下地址来访问 Dashboard 服务：http://127.0.0.1:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/5创建serviceaccountkubectl create serviceaccount admin1 -n kube-systemkubectl get sa -n kube-system6.然后我们使用官方推荐的 RBAC 方式来创建一个 Token 进行登录，重新打开一个 WSL2 终端，执行如下所示命令：   #创建一个新的 ServiceAccount    kubectl apply -f - &lt;&lt;EOF    apiVersion: v1    kind: ServiceAccount    metadata:      name: admin1      namespace: kubernetes-dashboard    EOF   # 将上面的 SA 绑定到系统的 cluster-admin 这个集群角色上    kubectl apply -f - &lt;&lt;EOF    apiVersion: rbac.authorization.k8s.io/v1    kind: ClusterRoleBinding    metadata:      name: admin1    roleRef:      apiGroup: rbac.authorization.k8s.io      kind: ClusterRole      name: cluster-admin    subjects:    - kind: ServiceAccount      name: admin1      namespace: kubernetes-dashboard    EOF</code></pre><h4 id="生成token"><a class="markdownIt-Anchor" href="#生成token"></a> 生成token</h4><pre><code>kubectl -n kubernetes-dashboard describe secret $(kubectl -n kubernetes-dashboard get secret | grep admin1 | awk '&#123;print $1&#125;')# 拷贝上面命令获取到的 Token 数据</code></pre><p><img data-src="/images/20210714/20210714195621774_18012.png" alt="命令执行与token" /><br />将上面获取到的 token 数据拷贝到 Dashboard 登录页面进行登录即可：<br /><img data-src="/images/20210714/20210714195716025_10803.png" alt="20210714195657" /><br />到这里我们就完成了在 Windows 系统下面使用 WSL2 + KinD 来搭建 Kubernetes 集群，对于本地开发测试来说非常方便。当然 WSL2 目前还是有一些小问题，比如不能通过局域网访问到 WSL2 里面的服务，当然也有一些解决方案，但是都不优雅，每次重启机器过后 WSL2 的 IP 都会变化，所以有时候也非常不方便，不过整体来说 WSL2 还是非常香的。</p><h3 id="问题记录"><a class="markdownIt-Anchor" href="#问题记录"></a> 问题记录</h3><h4 id="kubernetes-dashboard获取失败-网络请求失败"><a class="markdownIt-Anchor" href="#kubernetes-dashboard获取失败-网络请求失败"></a> Kubernetes Dashboard获取失败 网络请求失败</h4><p><a href="https://www.ipaddress.com/">IP 查询工具</a> 将查询出来的ip信息配置到hosts文件中<br /><img data-src="/images/20210714/20210714203849132_18061.png" alt="hosts文件" /></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;名词解释&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#名词解释&quot;&gt;&lt;/a&gt; 名词解释&lt;/h3&gt;
&lt;h4 id=&quot;wslwindows-subsystem-for-linux&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#wslwindows-subsystem-for-linux&quot;&gt;&lt;/a&gt; WSL（Windows Subsystem for Linux）&lt;/h4&gt;
&lt;p&gt;主要是为了在Windows 10上原生运行Linux二进制可执行文件（ELF格式），而提供的兼容层。 通俗来讲是在Windows10 嵌入了个Linux子系统（默认是ubuntu），方便运行大部分 Linux 命令及软件，比如grep MySQL Apache。这很大方便了使用Windows做开发的同学，不需要双系统或虚拟机了。&lt;/p&gt;</summary>
    
    
    
    <category term="安装教程" scheme="https://huangpiao.tech/categories/%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    
    <category term="k8s" scheme="https://huangpiao.tech/categories/%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/k8s/"/>
    
    
    <category term="安装教程" scheme="https://huangpiao.tech/tags/%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    
    <category term="k8s" scheme="https://huangpiao.tech/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>使用 Hexo+GitHub 搭建个人免费博客教程</title>
    <link href="https://huangpiao.tech/2021/07/12/%E4%BD%BF%E7%94%A8-Hexo-GitHub-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/"/>
    <id>https://huangpiao.tech/2021/07/12/%E4%BD%BF%E7%94%A8-Hexo-GitHub-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/</id>
    <published>2021-07-12T07:15:30.000Z</published>
    <updated>2021-07-14T12:51:42.814Z</updated>
    
    <content type="html"><![CDATA[<p>近些年来很多用户都喜欢使用 GitHub Pages 来搭建 Hexo 静态博客网站，其最吸引人的莫过于完全免费使用，并且非常稳定。虽然搭建时比较麻烦，有点折腾，但是配置完成后，基本不需要操心维护的事，甚至放了几年都忘记了，打开来看文章依然还在。本文就详细介绍下如何使用 Hexo + GitHub 搭建免费个人博客网站的教程。</p><span id="more"></span><h3 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h3><h4 id="github-pages-是什么"><a class="markdownIt-Anchor" href="#github-pages-是什么"></a> GitHub Pages 是什么？</h4><p><a href="https://docs.github.com/en/github/working-with-github-pages/about-github-pages">What is GitHub Pages? - GitHub Help</a> GitHub Pages 是由 GitHub 官方提供的一种免费的静态站点托管服务，让我们可以在 GitHub 仓库里托管和发布自己的静态网站页面。</p><h4 id="hexo-是什么"><a class="markdownIt-Anchor" href="#hexo-是什么"></a> Hexo 是什么？</h4><p>官网：<a href="https://hexo.io/zh-cn/">hexo.io</a><br />Hexo 是一个快速、简洁且高效的静态博客框架，它基于 Node.js 运行，可以将我们撰写的 Markdown 文档解析渲染成静态的 HTML 网页。</p><h4 id="hexo-github-文章发布原理"><a class="markdownIt-Anchor" href="#hexo-github-文章发布原理"></a> Hexo + GitHub 文章发布原理</h4><p>在本地撰写 Markdown 格式文章后，通过 Hexo 解析文档，渲染生成具有主题样式的 HTML 静态网页，再推送到 GitHub 上完成博文的发布。<br /><img data-src="/images/20210712/20210302205757822_8864.jpg" alt="1" /></p><h4 id="优点和不足"><a class="markdownIt-Anchor" href="#优点和不足"></a> 优点和不足</h4><p>**优点：**完全免费；静态站点，轻量快速；可按需求自由定制改造；托管在 GitHub，安全省心；迁移方便……<br />**不足：**发文不便，依赖于本地环境；更适合个人博客使用；GitHub 在国内访问速度有点不快可以考虑切换到码云。</p><h3 id="准备"><a class="markdownIt-Anchor" href="#准备"></a> 准备</h3><h4 id="注意事项"><a class="markdownIt-Anchor" href="#注意事项"></a> 注意事项</h4><p>输入代码时，核对准确，最好切换成英文输入法；将文中的 “用户名” 和 “邮箱” 替换为自己的 GitHub 账户名和绑定的邮箱；统一使用 Git Bash 进行操作（支持 Win、Mac）；</p><h4 id="环境搭建"><a class="markdownIt-Anchor" href="#环境搭建"></a> 环境搭建</h4><p>Hexo 基于 Node.js，搭建过程中还需要使用 npm（Node.js 已带） 和 git，因此先搭建本地操作环境，安装 Node.js 和 Git。</p><pre><code>Node.js：https://nodejs.org/zh-cnGit：https://git-scm.com/downloads</code></pre><p>下载 Node.js 和 Git 程序并安装，一路点 “下一步” 按默认配置完成安装。<br />安装完成后，Win+R 输入 cmd 并打开，依次输入 node -v、npm -v 和 git --version 并回车，如下图出现程序版本号即可。<br /><img data-src="/images/20210712/20210302205659402_21843.png" alt="2" /></p><h4 id="连接-github"><a class="markdownIt-Anchor" href="#连接-github"></a> 连接 Github</h4><p>使用邮箱注册 GitHub 账户，选择免费账户（Free），并完成邮件验证。<br />右键 -&gt; Git Bash Here，设置用户名和邮箱：</p><pre><code>git config --global user.name &quot;GitHub 用户名&quot;git config --global user.email &quot;GitHub 邮箱&quot;</code></pre><h5 id="创建-ssh-密匙"><a class="markdownIt-Anchor" href="#创建-ssh-密匙"></a> 创建 SSH 密匙：</h5><pre><code>输入 ssh-keygen -t rsa -C &quot;GitHub 邮箱&quot;，然后一路回车。</code></pre><h5 id="添加密匙"><a class="markdownIt-Anchor" href="#添加密匙"></a> 添加密匙：</h5><p>进入 [C:\Users\用户名.ssh] 目录（要勾选显示“隐藏的项目”），用记事本打开公钥 id_rsa.pub 文件并复制里面的内容。<br />登陆 GitHub ，进入 Settings 页面，选择左边栏的 SSH and GPG keys，点击 New SSH key。<br />Title 随便取个名字，粘贴复制的 id_rsa.pub 内容到 Key 中，点击 Add SSH key 完成添加。<br /><img data-src="/images/20210712/20210302210559602_8892.jpg" alt="##### " /></p><h5 id="验证连接"><a class="markdownIt-Anchor" href="#验证连接"></a> 验证连接：</h5><p>打开 Git Bash，输入 ssh -T <a href="mailto:git@github.com">git@github.com</a> 出现 “Are you sure……”，输入 yes 回车确认。<br />显示 “Hi xxx! You’ve successfully……” 即连接成功。<br /><img data-src="/images/20210712/20210302210635984_19356.png" alt="##### " /></p><h5 id="创建-github-pages-仓库"><a class="markdownIt-Anchor" href="#创建-github-pages-仓库"></a> 创建 Github Pages 仓库</h5><p>GitHub 主页右上角加号 -&gt; New repository：<br />Repository name 中输入 <a href="http://xn--eqr924avxo.github.io">用户名.github.io</a><br />勾选 “Initialize this repository with a README”<br />Description 选填<br /><img data-src="/images/20210712/20210302212114379_29362.png" alt="" /><br />填好后点击 Create repository 创建,创建后默认自动启用 HTTPS，博客地址为：<a href="https://xn--eqr924avxo.github.io">https://用户名.github.io</a></p><h4 id="本地安装-hexo-博客程序"><a class="markdownIt-Anchor" href="#本地安装-hexo-博客程序"></a> 本地安装 Hexo 博客程序</h4><p>新建一个文件夹用来存放 Hexo 的程序文件，如 Hexo-Blog。打开该文件夹，右键 -&gt; Git Bash Here。</p><h5 id="安装-hexo"><a class="markdownIt-Anchor" href="#安装-hexo"></a> 安装 Hexo</h5><p>使用 npm 一键安装 Hexo 博客程序：<br />npm install -g hexo-cli<br />Mac 用户需要管理员权限（sudo），运行这条命令：<br />sudo npm install -g hexo-cli<br />安装时间有点久（真的很慢！），界面也没任何反应，耐心等待，安装完成后如下图。<br /><img data-src="/images/20210712/20210302212820075_22759.png" alt="npm install -g hexo-cli" /></p><h4 id="hexo-初始化和本地预览"><a class="markdownIt-Anchor" href="#hexo-初始化和本地预览"></a> Hexo 初始化和本地预览</h4><pre><code>初始化并安装所需组件：</code></pre><p><code>hexo init # 初始化 npm install # 安装组件</code><br />完成后依次输入下面命令，启动本地服务器进行预览：<br /><code>hexo g # 生成页面 hexo s # 启动预览</code><br /><img data-src="/images/20210712/20210302214116810_10687.png" alt="localhost:4000" /><br />访问 <a href="http://localhost:4000">http://localhost:4000</a>，出现 Hexo 默认页面，本地博客安装成功！<br />Tips：如果出现页面加载不出来，可能是端口被占用了。Ctrl+C 关闭服务器，运行 hexo server -p 5000 更改端口号后重试。<br />Hexo 博客文件夹目录结构如下：<br /><img data-src="/images/20210712/20210302214342657_16535.jpg" alt="10" /></p><h4 id="部署-hexo-到-github-pages"><a class="markdownIt-Anchor" href="#部署-hexo-到-github-pages"></a> 部署 Hexo 到 GitHub Pages</h4><p>本地博客测试成功后，就是上传到 GitHub 进行部署，使其能够在网络上访问。</p><pre><code>首先安装 hexo-deployer-git：`npm install hexo-deployer-git --save`然后修改 _config.yml 文件末尾的 Deployment 部分，修改成如下：deploy:  type: git  repository: git@github.com:用户名/用户名.github.io.git  branch: master</code></pre><p>完成后运行 hexo d 将网站上传部署到 GitHub Pages。<br />完成！这时访问我们的 GitHub 域名 <a href="https://xn--eqr924avxo.github.io">https://用户名.github.io</a> 就可以看到 Hexo 网站了。</p><h4 id="绑定域名可选"><a class="markdownIt-Anchor" href="#绑定域名可选"></a> 绑定域名（可选）</h4><p>博客搭建完成使用的是 GitHub 的子域名（用户名.<a href="http://github.io">http://github.io</a>），我们可以为 Hexo 博客绑定自己的域名替换 GitHub 域名，更加个性化和专业，也利于 SEO。我们使用 Namesilo 进行注册，便宜好用没啥套路，使用优惠码 okoff 优惠一美元，com 域名大概 50 块一年。<br />关于阿里云上域名的操作方式百度下配置方式类似<br /><strong>域名注册和解析</strong><br />域名注册和解析教程：Namesilo 域名购买及使用教程<br />按上面教程注册并解析域名，在 DNS 设置部分，删除自带的记录，然后添加 CNAME 记录将 www 域名解析指向 <a href="http://xn--eqr924avxo.github.io">用户名.github.io</a>。</p><h4 id="更换主题"><a class="markdownIt-Anchor" href="#更换主题"></a> 更换主题</h4><h5 id="方式一"><a class="markdownIt-Anchor" href="#方式一"></a> 方式一：</h5><pre><code>Hexo 5.0.0 版本以上，推荐通过 npm 直接安装，进入博客目录执行命令：</code></pre><p><code>npm install --save hexo-theme-fluid</code></p><pre><code>然后在博客目录下创建 _config.fluid.yml，将主题的 _config.yml 内容复制进去。</code></pre><h5 id="方式二"><a class="markdownIt-Anchor" href="#方式二"></a> 方式二：</h5><pre><code>下载 最新 release 版本 解压到 themes 目录，并将解压出的文件夹重命名为 fluid。</code></pre><p><strong>指定主题</strong><br />如下修改 Hexo 博客目录中的 _config.yml：<br /><code>theme: fluid # 指定主题</code><br /><code>language: zh-CN # 指定语言，会影响主题显示的语言，按需修改</code><br /><strong>创建「关于页」</strong><br />首次使用主题的「关于页」需要手动创建：<br /><code>hexo new page about</code></p><pre><code>创建成功后，编辑博客目录下 /source/about/index.md，添加 layout 属性。修改后的文件示例如下：</code></pre><p><code>---</code><br /><code>title: about</code><br /><code>date: 2020-02-23 19:20:33</code><br /><code>layout: about</code><br /><code>---</code></p><pre><code>这里写关于页的正文，支持 Markdown, HTML</code></pre><h3 id="常见问题"><a class="markdownIt-Anchor" href="#常见问题"></a> 常见问题</h3><h4 id="hexo-init未在空目录下初始化-导致初始化失败"><a class="markdownIt-Anchor" href="#hexo-init未在空目录下初始化-导致初始化失败"></a> hexo init未在空目录下初始化 导致初始化失败</h4><p><img data-src="/images/20210712/20210302213302849_20335.png" alt="" /></p><h4 id="github连接失败-原因密码不对导致本地电脑存储了gitlab私库账户信息博主没对多个账号进行处理导致"><a class="markdownIt-Anchor" href="#github连接失败-原因密码不对导致本地电脑存储了gitlab私库账户信息博主没对多个账号进行处理导致"></a> github连接失败 原因密码不对导致（本地电脑存储了gitlab私库账户信息，博主没对多个账号进行处理导致）</h4><p><strong>解决方式：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">（1）先重新设置本机git配置：git config --global credential.helper store</span><br><span class="line">（2）输入github账号和密码</span><br></pre></td></tr></table></figure><p><img data-src="/images/20210712/20210302213605257_8128.png" alt="git config --global credential" /></p><h4 id="更改hexo博客文件时无法进行github提交"><a class="markdownIt-Anchor" href="#更改hexo博客文件时无法进行github提交"></a> 更改hexo博客文件时无法进行github提交</h4><p><strong>解决方式</strong></p><pre><code>删除.deploy_git文件夹;输入`git config --global core.autocrlf false`然后，依次执行：</code></pre><p><code>hexo clean hexo g hexo d</code><br /><img data-src="/images/20210712/20210302220322285_27412.png" alt="" /></p><h4 id="如果出现页面无法渲染的情况"><a class="markdownIt-Anchor" href="#如果出现页面无法渲染的情况"></a> 如果出现页面无法渲染的情况</h4><pre><code>修改配置文件</code></pre><p><img data-src="/images/20210712/20210302223252385_29196.png" alt="修改配置文件" /></p><h4 id="如何更换网页图标"><a class="markdownIt-Anchor" href="#如何更换网页图标"></a> 如何更换网页图标</h4><p><strong>解决办法</strong><br />在主题页放入图标themes\fluid-1.8.8\source\img</p><h4 id="无法应用名人名言api-bug"><a class="markdownIt-Anchor" href="#无法应用名人名言api-bug"></a> 无法应用名人名言api bug</h4><p>1.多字段不能[‘data’，‘content’] 需要[‘data.content’]<br />2.只支持api返回结果中第一个字段值为集合得情况转换<br /><img data-src="/images/20210712/20210309180718864_15542.png" alt="data" /></p><h3 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料：</h3><p><a href="https://huangpiao.tech/tags/Hexo/">https://huangpiao.tech/tags/Hexo/</a><br /><a href="https://jiuxiaoge.github.io/2018/10/06/hexo%E5%9C%A8next%E4%B8%BB%E9%A2%98%E4%B8%8B%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%92%8C%E6%A0%87%E7%AD%BE/">https://jiuxiaoge.github.io/2018/10/06/hexo在next主题下如何添加分类和标签/</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;近些年来很多用户都喜欢使用 GitHub Pages 来搭建 Hexo 静态博客网站，其最吸引人的莫过于完全免费使用，并且非常稳定。虽然搭建时比较麻烦，有点折腾，但是配置完成后，基本不需要操心维护的事，甚至放了几年都忘记了，打开来看文章依然还在。本文就详细介绍下如何使用 Hexo + GitHub 搭建免费个人博客网站的教程。&lt;/p&gt;</summary>
    
    
    
    <category term="搭建博客" scheme="https://huangpiao.tech/categories/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="hexo" scheme="https://huangpiao.tech/categories/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/hexo/"/>
    
    
    <category term="搭建博客" scheme="https://huangpiao.tech/tags/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="hexo" scheme="https://huangpiao.tech/tags/hexo/"/>
    
  </entry>
  
</feed>
